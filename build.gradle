/*
 * Copyright <2019> Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

buildscript {

    ext {
        es_version = System.getProperty("es.version", "6.7.0")
    }
    // This isn't applying from repositories.gradle so repeating it here
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${es_version}"
    }
}

plugins {
    id 'java'
    id 'nebula.ospackage' version "5.3.0"
}

ext {
    opendistroVersion = '0.9.0'
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")
}

group = "com.amazon.opendistroforelasticsearch"
version = "${opendistroVersion}.0"
if (isSnapshot) {
    version += "-SNAPSHOT"
}

apply plugin: 'elasticsearch.esplugin'

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}
test {
    enabled = true
}

licenseHeaders.enabled = false

esplugin {
    name 'opendistro_performance_analyzer'
    description 'Performance Analyzer Plugin'
    classname 'com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerPlugin'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    JavaVersion targetVersion = JavaVersion.toVersion(targetCompatibility);
    if (targetVersion.isJava9Compatible()) {
        options.compilerArgs += ["--add-exports", "jdk.attach/sun.tools.attach=ALL-UNNAMED"]
    }
}

 javadoc {
     options.addStringOption("-add-exports", "jdk.attach/sun.tools.attach=ALL-UNNAMED")
}

project.afterEvaluate {
    JavaVersion targetVersion = JavaVersion.toVersion(targetCompatibility)

    // cannot contain the first version
    // should be '8' or '11' etc.
    String version = targetVersion.toString()
    if (version.length() > 2) {
        version = targetVersion.toString().substring(2)
    }

    compileJava.options.compilerArgs.removeAll(['--release', version])
}

repositories {
    mavenCentral()
}


configurations {
    includeJars
}

tasks.withType(JavaCompile) {
    options.warnings = false
}

dependencies {
    if (JavaVersion.current() <= JavaVersion.VERSION_1_8) {
        compile files("${System.properties['java.home']}/../lib/tools.jar")
    }

    configurations {
        // jarHell reports class name conflicts between securemock and mockito-core
        // has to disable one of them.
        all*.exclude group: "org.elasticsearch", module: "securemock"
    }

    compile 'org.jooq:jooq:3.10.8'
    compile 'org.xerial:sqlite-jdbc:3.8.11.2'
    compile 'com.google.guava:guava:27.0.1-jre'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.11'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.11'

    // JDK9+ has to run powermock 2+. https://github.com/powermock/powermock/issues/888
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.0'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.23.0'
    testCompile group: 'org.powermock', name: 'powermock-core', version: '2.0.0'
    testCompile group: 'org.powermock', name: 'powermock-api-support', version: '2.0.0'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4-common', version: '2.0.0'
    testCompile group: 'org.javassist', name: 'javassist', version: '3.24.0-GA'
    testCompile group: 'org.powermock', name: 'powermock-reflect', version: '2.0.0'
    testCompile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.9.3'
    testCompile group: 'org.objenesis', name: 'objenesis', version: '3.0.1'
}

dependencyLicenses {
    mapping from: /jackson-.*/, to: 'jackson'
}

dependencyLicenses.doFirst {
    updateShas.updateShas()
}

integTestRunner {
    // add "-Dtests.security.manager=false" to VM options if you want to run integ tests in IntelliJ
    systemProperty 'tests.security.manager', 'false'
    ifNoTests 'ignore'
}

bundlePlugin {
    from ("pa_config") {
        into "pa_config"
    }
    from ("pa_bin") {
        into "pa_bin"
        include "performance-analyzer-agent"
    }
    from ("pa_bin") {
        into "extensions"
        include "performance-analyzer-agent"
    }
    from ('build/resources/main/') {
        include "plugin-security.policy"
    }
    exclude ('tools.jar')
}

gradle.startParameter.excludedTaskNames += [ "forbiddenApisMain",
                                             "forbiddenApisTest",
                                             "thirdPartyAudit", "testingConventions"]

// This is afterEvaluate because the bundlePlugin ZIP task is updated afterEvaluate and changes the ZIP name to match the plugin name
afterEvaluate {
    ospackage {
        packageName = "opendistro-performance-analyzer"
        release = isSnapshot ? "0.1" : '1'
        version = "${project.version}" - "-SNAPSHOT"

        into '/usr/share/elasticsearch/plugins'
        from(zipTree(bundlePlugin.archivePath)) {
            into esplugin.name
        }

        configurationFile '/usr/lib/systemd/system/opendistro-elasticsearch.service'
        into('/usr/lib/systemd/system') {
            fileType CONFIG | NOREPLACE
            from "packaging/opendistro-performance-analyzer.service"
            fileMode 0644
        }
        into('/usr/share/elasticsearch/bin') {
            from ('packaging/performance-analyzer-agent-cli') {
                fileMode 0755
            }
        }
        postInstall file('packaging/rpm/postinst')

        user 'root'
        permissionGroup 'root'
        fileMode 0644
        dirMode 0755

        requires('elasticsearch-oss', versions.elasticsearch, EQUAL)
        arch = 'NOARCH'
        packager = 'Amazon'
        vendor = 'Amazon'
        os = 'LINUX'
        prefix '/usr'

        license 'ASL-2.0'
        maintainer 'OpenDistro for Elasticsearch Team <opendistro@amazon.com>'
        url 'https://opendistro.github.io/elasticsearch/downloads'
        summary '''
         SQL plugin for OpenDistro for Elasticsearch. 
         Reference documentation can be found at https://opendistro.github.io/elasticsearch/docs.
    '''.stripIndent().replace('\n', ' ').trim()
    }

    buildRpm {
        archiveName "${packageName}-${version}.rpm"
        dependsOn 'assemble'
    }
}
