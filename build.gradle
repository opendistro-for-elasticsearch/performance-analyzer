/*
 * Copyright <2019> Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

buildscript {

    ext {
        es_version = System.getProperty("es.version", "7.3.2")
    }
    // This isn't applying from repositories.gradle so repeating it here
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${es_version}"
        classpath 'org.ajoberstar:gradle-git:0.2.3'
    }
}

plugins {
    id 'java'
    id 'nebula.ospackage' version "8.2.0"
}

ext {
    opendistroVersion = '1.3.0'
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")
}

group = "com.amazon.opendistroforelasticsearch"
version = "${opendistroVersion}.0"
if (isSnapshot) {
    version += "-SNAPSHOT"
}

apply plugin: 'elasticsearch.esplugin'

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

test {
    enabled = true
}

licenseHeaders.enabled = false

esplugin {
    name 'opendistro_performance_analyzer'
    description 'Performance Analyzer Plugin'
    classname 'com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerPlugin'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    JavaVersion targetVersion = JavaVersion.toVersion(targetCompatibility);
    if (targetVersion.isJava9Compatible()) {
        options.compilerArgs += ["--add-exports", "jdk.attach/sun.tools.attach=ALL-UNNAMED"]
    }
}

 javadoc {
     options.addStringOption("-add-exports", "jdk.attach/sun.tools.attach=ALL-UNNAMED")
}

project.afterEvaluate {
    JavaVersion targetVersion = JavaVersion.toVersion(targetCompatibility)

    // cannot contain the first version
    // should be '8' or '11' etc.
    String version = targetVersion.toString()
    if (version.length() > 2) {
        version = targetVersion.toString().substring(2)
    }

    compileJava.options.compilerArgs.removeAll(['--release', version])
}

repositories {
    mavenCentral()
    mavenLocal()
}


configurations {
    includeJars
}

tasks.withType(JavaCompile) {
    options.warnings = false
}

dependencies {
    if (JavaVersion.current() <= JavaVersion.VERSION_1_8) {
        compile files("${System.properties['java.home']}/../lib/tools.jar")
    }

    configurations {
        // jarHell reports class name conflicts between securemock and mockito-core
        // has to disable one of them.
        all*.exclude group: "org.elasticsearch", module: "securemock"
    }

    compile 'com.google.guava:guava:27.0.1-jre'
    compile 'org.jooq:jooq:3.10.8'
    compile 'org.bouncycastle:bcprov-jdk15on:1.60'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.60'
    compile 'com.amazon.opendistro.elasticsearch:performanceanalyzer-rca:1.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.11'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.11'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.11'

    // JDK9+ has to run powermock 2+. https://github.com/powermock/powermock/issues/888
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.0'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.23.0'
    testCompile group: 'org.powermock', name: 'powermock-core', version: '2.0.0'
    testCompile group: 'org.powermock', name: 'powermock-api-support', version: '2.0.0'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4-common', version: '2.0.0'
    testCompile group: 'org.javassist', name: 'javassist', version: '3.24.0-GA'
    testCompile group: 'org.powermock', name: 'powermock-reflect', version: '2.0.0'
    testCompile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.9.3'
    testCompile group: 'org.objenesis', name: 'objenesis', version: '3.0.1'
}

dependencyLicenses {
    mapping from: /jackson-.*/, to: 'jackson'
}

dependencyLicenses.doFirst {
    updateShas.updateShas()
}

gradle.startParameter.excludedTaskNames += [ "forbiddenApisMain",
                                             "forbiddenApisTest",
                                             "thirdPartyAudit",
                                             "testingConventions"]

import java.nio.file.Paths
import org.ajoberstar.gradle.git.tasks.GitClone

String rcaDir
String rcaArtifactsDir

static def propEnabled(property) {
    return System.getProperty(property) != null
}

// The following Gradle tasks are used to create a PA/RCA enabled Elasticsearch cluster
// Pass the -Dtests.enableIT property to Gradle to run ITs
task cloneGitRepo(type: GitClone) {
    rcaDir = Paths.get(getProject().getBuildDir().toString(), "performance-analyzer-rca").toString()
    def destination = file(rcaDir)
    uri = "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca.git"
    destinationPath = destination
    bare = false
    enabled = !destination.exists() // to clone only once
}

task buildRca() {
    dependsOn(cloneGitRepo)
    doLast {
        exec {
            workingDir("$rcaDir")
            commandLine './gradlew', 'build', '-x', 'test'
        }
    }
}

task unpackRca(type: Copy) {
    dependsOn(buildRca)
    from(zipTree("$rcaDir/build/distributions/performance-analyzer-rca.zip")) {
    }
    into "$rcaDir/build/distributions"
    rcaArtifactsDir = "$rcaDir/build/distributions/performance-analyzer-rca/"
    doLast {
        mkdir "$rcaArtifactsDir/rca_bits"
        mkdir "$rcaArtifactsDir/rca_bits/performance-analyzer-rca"
    }
}

task preparePaBin(type: Copy) {
    dependsOn(unpackRca)
    from "$rcaArtifactsDir/bin"
    include "*"
    into "$rcaArtifactsDir/pa_bin"
}

task deleteRcaBin(type: Delete) {
    dependsOn(preparePaBin)
    delete "$rcaArtifactsDir/bin"
}

task prepRcaBits(type: Copy) {
    dependsOn(deleteRcaBin)
    from "$rcaArtifactsDir/pa_config"
    into "$rcaArtifactsDir/rca_bits/performance-analyzer-rca"
}

bundlePlugin {
    dependsOn 'cloneGitRepo'
    from("$rcaArtifactsDir/pa_config") {
        into "pa_config"
    }
    from("$rcaArtifactsDir/pa_bin") {
        into "pa_bin"
        include "performance-analyzer-agent"
    }
    from("$rcaArtifactsDir/pa_bin") {
        into "extensions"
        include "performance-analyzer-agent"
    }
    from ("$rcaArtifactsDir/lib") {
        into "lib"
    }
    from ("$rcaArtifactsDir/rca_bits") {
        into "rca_bits"
    }
    from('build/resources/main/') {
        include "plugin-security.policy"
    }
    exclude('tools.jar')
    from("config/opendistro_performance_analyzer") {
        into "config"
    }
}

task setupEsCluster() {
    dependsOn(cloneGitRepo)
    onlyIf = {
        propEnabled("tests.enableIT")
    }
    doLast {
        exec {
            workingDir(rcaDir)
            commandLine './gradlew', 'enableRca'
        }
        sleep(5000)
    }
}

integTestRunner {
    onlyIf = {
        propEnabled("tests.enableIT")
    }
    // add "-Dtests.security.manager=false" to VM options if you want to run integ tests in IntelliJ
    systemProperty 'tests.security.manager', 'false'
    if (propEnabled("tests.useDockerCluster")) {
        dependsOn(setupEsCluster)
    }
}

// This is afterEvaluate because the bundlePlugin ZIP task is updated afterEvaluate and changes the ZIP name to match the plugin name
afterEvaluate {
    ospackage {
        packageName = "opendistro-performance-analyzer"
        release = isSnapshot ? "0.1" : '1'
        version = "${project.version}" - "-SNAPSHOT"

        into '/usr/share/elasticsearch/plugins'
        from(zipTree(bundlePlugin.archivePath)) {
            into esplugin.name
        }

        configurationFile '/usr/lib/systemd/system/opendistro-elasticsearch.service'
        into('/usr/lib/systemd/system') {
            fileType CONFIG | NOREPLACE
            from "packaging/opendistro-performance-analyzer.service"
            fileMode 0644
        }
        into('/usr/share/elasticsearch/bin') {
            from ('packaging/performance-analyzer-agent-cli') {
                fileMode 0755
            }
        }

        user 'root'
        permissionGroup 'root'
        fileMode 0644
        dirMode 0755

        requires('elasticsearch-oss', versions.elasticsearch, EQUAL)
        packager = 'Amazon'
        vendor = 'Amazon'
        os = 'LINUX'
        prefix '/usr'

        license 'ASL-2.0'
        maintainer 'OpenDistro for Elasticsearch Team <opendistro@amazon.com>'
        url 'https://opendistro.github.io/elasticsearch/downloads'
        summary '''
         Performance Analyzer plugin for OpenDistro for Elasticsearch.
         Reference documentation can be found at https://opendistro.github.io/elasticsearch/docs.
    '''.stripIndent().replace('\n', ' ').trim()
    }

    buildRpm {
        arch = 'NOARCH'
        postInstall file('packaging/rpm/postinst')
        archiveName "${packageName}-${version}.rpm"
        dependsOn 'assemble'
    }

    buildDeb {
        arch = 'amd64'
        postInstall file('packaging/deb/postinst')
        archiveName "${packageName}-${version}.deb"
        dependsOn 'assemble'
    }

    task buildPackages(type: GradleBuild) {
         tasks = ['build', 'buildRpm', 'buildDeb']
    }
}

bundlePlugin.mustRunAfter prepRcaBits
build.dependsOn prepRcaBits